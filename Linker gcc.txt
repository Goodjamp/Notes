See

https://web.mit.edu/rhel-doc/3/rhel-ld-en-3/sections.html


Description LD script

https://ftp.gnu.org/old-gnu/Manuals/ld-2.9.1/html_chapter/ld_3.html



!!!!!!!!!!!!!!!!!!!!!!!!
Generally, the LD file describes the section. Section - it is a part of the FW image, that includes some part of the code or data (variables).
The section (out section) includes one or more sections.
The section allowed the user to place code or data on the dedicated place inside the FW image.
in section - special name, defined inside the library or created by the user on the code, to sign functions or variables.
            For example, we can use the next construction to tell the linker that we wont placed variabel *a* inside the section *inSectionName_1*.

            __attribute__((section(".inSectionName_1"), used)) 	char a;
			
			OR 
			
			char a __attribute__((section(".inSectionName_1"), used)) = a;

			Inside the linker file, we can place *inSectionName_1* inside any output section !!!!
out section - the section, described inside the LD file. One output section could include one or more input sections.
              See the deacription in the section


The section description example:

/*
 * SECTION - command could be used only ones per *.ld file
 * used:
 *      INCLUDE (any.ld)
 * construction to include other *.ld file
 */
SECTION {
/*
 * C style comments support
 * Point (.) keep current position of linking
 */
 
 /***********************************************Sections description example_1*******************************************/
 
    .outSectionName_1:
	{
	    *(.inSectionName_1)
	}
	
	/*
	 * OR one line
	 */
	.outSectionName_1: {*(.inSectionName_1)}

    /*
	 * !!!!! out section name - outSectionName_1
	 * !!!!! in section name - inSectionName_1
	 * This construction descride the out section outSectionName_1.
	 * The point at the beginning of the name of the section means that the entry point of the outSectionName_1 is equal to the current point value (.)
	 * String: 
	 *         *(.inSectionName_1)
     * meaning: on the all files take data from the input section inSectionName_1 and placed on the output section outSectionName_1. 
	 */
	 

    .outSectionName_1:
	{
	    *(.inSectionName_1)
		*(.inSectionName_2)
	}

 /***********************************************Sections description example_2*******************************************/
    .outSectionName_2:
	{
	    KEEP(*(.inSectionName_2))
	}
    /*
	 * This construction descride the out section outSectionName_2.
	 * The point at the beginning of the name of the section means that the entry point of the outSectionName is equal to the current point value (.)
	 * String: 
	 *         KEEP(*(.inSectionName_2))
     * meaning: on the all files take data from the input section inSectionName_2 and placed on the output section outSectionName_2.
     * The command *KEEP* means that even if data placed on the inSectionName_2 does not use on the code, they will not be skipped by the linker and will be added to the output in any case.
	 *
	 * Generaly 
	 */


 /***********************************************Sections description example_3*******************************************/
    .outSectionName_3 ALIGN(0x1000):
	{
	    *(.inSectionName_3)
	}
    /*
	 * This construction descride the out section outSectionName_3.
	 * String: 
	 *         .outSectionName_3 ALIGN(0x1000)
     * meaning: placed the output section outSectionName_3 after point (.) with alight to (0x1000)
	 */


 /***********************************************Sections description example_4*******************************************/
    outSectionName_ 0x53000:
	{
	    *(.inSectionName_4)
	}
    /*
	 * This construction descride the out section outSectionName_3.
	 * String: 
	 *         .outSectionName_3 ALIGN(0x1000)
     * meaning: placed the output section outSectionName_3 after point (.) with alight to (0x1000)
	 */

}