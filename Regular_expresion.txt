X{1,3}       вхожление символа X от 1 до 5 раз: 1, 12, 123
[0-9]{1,2}   вхождение диапазона чисел (0 - 9) от одного до двух раз: любое 1 или 2 разрядное число
^[0-9]{1,2}   вхождение диапазона чисел (0 - 9) от одного до двух раз: любое 1 или 2 разрядное число В НАЧАЛЕ СТРОКИ (символ ^ перед выражением говорит о том что вхождение должно бить в начале строки)
[0-9]{1,2}$   вхождение диапазона чисел (0 - 9) от одного до двух раз: любое 1 или 2 разрядное число В КОНЦЕ СТРОКИ (символ $ после выражения говорит о том что вхождение должно бить в конце строки)
^[0-9]{1,2}$   вхождение диапазона чисел (0 - 9) от одного до двух раз: любое 1 или 2 разрядное число В КОНЦЕ СТРОКИ. Строка должна содержать только одно число


Можно заменить
[0-9] = \d   - целое число в диапазоне 0-9. Соответственно выражение [0-9]{1,1} равно \d 
{0,1} = ?  0 или 1 вхождение. Например \d\d?. В даное выражение евивалентно [0-9][0-9]{0,1} или [0-9]{1,2}



([\d,a-f]{2,2})\s  вхождение точно из двух символов: число или текст в диапазоне a-f. после вхожде должен бить пробел 




E?	Соответствует нулю или одному вхождению E. Этот квантор означает, что предыдущее выражение необязательное, поскольку соответствие всё равно будет, найдено выражение или нет.
    E? - это то же самое, что и E{0,1}. Например, dents? соответствует 'dent' или 'dents'.
? = {0,1}


E+	Соответствует одному или нескольким вхождениям E. E+ - это то же самое, что и E{1,}. Например, 0+ соответствует '0', '00', '000' и т.д.
+ = {1,}


E*	Соответствует нулю или нескольким вхождениям E. Это то же самое, что и E{0,}. Квантор * часто используется по ошибке там, где должен быть использован +. Например, если \s*$ будет использоваться в выражении для поиска строк, которые заканчиваются пробельными символами, то оно будет соответствовать любой строке, поскольку \s*$ означает Соответствие нулю или нескольким пробельным символам со следующим концом строки. Корректное регулярное выражение для соответствия строкам, которые имеют как минимум один пробельный символ, это \s+$.
* = {0,}

E{n}	Соответствует точно n вхождениям E. E{n} то же самое, что и повтор E n раз. Например, x{5} это то же самое, что и xxxxx. Это также то же самое, что и E{n,n}, например, x{5,5}.
E{n,}	Соответствует не меньше n вхождений E.
E{,m}	Соответствует не больше m вхождений E. E{,m} это то же самое, что и E{0,m}.
E{n,m}	Соответствует не меньше n и не больше m вхождений E.

. (Точка) Соответствует любому символу. Наример, следующий шаблон найдет все строки любой длины, которые начинають символом "-" и заканчиваются симаолом "+": ^\-.*\+\n

[^] - исключение:
                [^a] - исключение символа "а": насти все символи кроме "а"
                [^\\>]qw - найти строку, первый сивол которой НЕ "<", второй "q", третий "w"
				[^\. , ^\s]qw - найти строку, первый сивол которой НЕ "." и НЕ " ", второй "q", третий "w" (тоесть не подхядя последовательности ".qw", " qw")



X(?=Y) Lookahead (Поиск выражения X, если после X находится выражение Y). It means "look for X, but match only if followed by Y". There may be any pattern instead of X and Y. For example, on the string "1 turkey costs 30€", the regular expresion "\d+(?=€)" return 30
       More complex tests are possible, e.g. X(?=Y)(?=Z) means:
       1 - Find X.
       2 - Check if Y is immediately after X (skip if isn’t).
       3 - Check if Z is immediately after Y (skip if isn’t).
       4 - If both tests passed, then it’s the match.
	   
(?!Y)X Negative lookahead (Поиск выражения X, если после X НЕ находится выражение Y)

(?<=Y)X Lookbehind (Поиск выражения X, если перед X находится выражение Y)

(?<!Y)X Negative Lookbehind (Поиск выражения X, если перед X НЕ находится выражение Y)

Если нужно включить Y в результаты поиска, нужно Y поместить в скобки, напрмер для Negative Lookbehind
       (?<=(Y))X

https://www.technical-recipes.com/2020/using-regex-to-find-and-replace-text-in-notepad/