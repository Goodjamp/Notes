// the name of the list element coud be created base on the: LIST_NAME + Item:

typedef struct {
    uint8_t val
} ListNameItem;

typedef struct {
    uint32_t itmesNumber;
	ListNameItem item[]
} ListName;

// Good idea used word: ENTRY (for the list or colection item)
struct myStr {
    uint8_t f1;
	uint8_t f2;
} str[10];
struct myStr strEntry = str[5];

// The quantity on the name looks good with word: COUNT 

uint32_t itemCount;

// If we wont to pass information about value inside array, use word: CONTENT

# ARRAY_CONTENT    {1, 2, 3, 4}

//synonims list: compute, calculate

// synonims: before, leading

/*
 * What a logical difference  between attributes and properties
 *
 * Attributes:
 * Static, metadata-like descriptors often used to define initial states or settings for objects or elements. In HTML, attributes are defined in the markup itself.
 * 
 * Properties:
 * Dynamic, runtime data or behaviors that belong to an object or element and can be manipulated directly via code (e.g., JavaScript in the DOM).
 * 
 */
 
 // Parse GetDescriptor request and perform the corresponding action.
 
 /*
  * To specify somthing that combine multiple thiks ew can to use definition below:
  * - Packet,
  * - Container,
  * - Command
  * - frame
  */
  
Relation between multiple essences : associate 